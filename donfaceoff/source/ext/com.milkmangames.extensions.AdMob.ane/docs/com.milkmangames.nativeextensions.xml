<?xml version="1.0" encoding="UTF-8"?><apiPackage id="com.milkmangames.nativeextensions"><apiName>com.milkmangames.nativeextensions</apiName><apiDetail/><apiClassifier id="com.milkmangames.nativeextensions:AdMobAdType"><apiName>AdMobAdType</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiOperation id="com.milkmangames.nativeextensions:AdMobAdType:getPixelSize"><apiName>getPixelSize</apiName><shortdesc>
		 Return the pixel dimension of a given ad type for the device currently running.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>a Rectangle object's whose width and height properties reflect the true pixel size of the ad relative to the device dimensions.
		 </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>adType</apiItemName><apiType value="String"/><apiDesc>The ad type to get the pixel size for (AdMobAdType.BANNNER,AdMobAdType.IAB_MRECT,AdMobAdType.IAB_BANNER, or AdMobAdType.IAB_LEADERBOARD.)
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Return the pixel dimension of a given ad type for the device currently running. (AdMob sizes are dependent on the DPI of the phone or tablet;
		 for instance, BANNER may be larger (in pixels) on a phone with a 3" screen than a phone with a 5" screen.
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="com.milkmangames.nativeextensions:AdMobAdType:BANNER"><apiName>BANNER</apiName><shortdesc> Standard Banner (Phone) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.BANNER) to determine the pixel size this ad will appear.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>BANNER</apiData><apiType value="String"/></apiValueDef><apiDesc> Standard Banner (Phone) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.BANNER) to determine the pixel size this ad will appear.  </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMobAdType:IAB_BANNER"><apiName>IAB_BANNER</apiName><shortdesc> IAB Full-Size Banner (Tablet) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.IAB_BANNER) to determine the pixel size this ad will appear.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>IAB_BANNER</apiData><apiType value="String"/></apiValueDef><apiDesc> IAB Full-Size Banner (Tablet) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.IAB_BANNER) to determine the pixel size this ad will appear. </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMobAdType:IAB_LEADERBOARD"><apiName>IAB_LEADERBOARD</apiName><shortdesc> IAB Leaderboard (Tablet) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.IAB_LEADERBOARD) to determine the pixel size this ad will appear.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>IAB_LEADERBOARD</apiData><apiType value="String"/></apiValueDef><apiDesc> IAB Leaderboard (Tablet) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.IAB_LEADERBOARD) to determine the pixel size this ad will appear. </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMobAdType:IAB_MRECT"><apiName>IAB_MRECT</apiName><shortdesc> IAB Medium Rectangle (Tablet) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.IAB_MRECT) to determine the pixel size this ad will appear.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>IAB_MRECT</apiData><apiType value="String"/></apiValueDef><apiDesc> IAB Medium Rectangle (Tablet) Ad Type: use AdMobAdType.getPixelSize(AdMobAdType.IAB_MRECT) to determine the pixel size this ad will appear. </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.milkmangames.nativeextensions:AdMob"><apiName>AdMob</apiName><shortdesc> AdMob </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> AdMob </apiDesc></apiClassifierDetail><adobeApiEvent id="com.milkmangames.nativeextensions:AdMob_com.milkmangames.nativeextensions.events.AdMobEvent.LEAVE_APPLICATION_LEAVE_APPLICATION"><apiName>LEAVE_APPLICATION</apiName><shortdesc> Dispatched when a user action on an ad causes the focus to change elsewhere
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.events.AdMobEvent.LEAVE_APPLICATION</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.events.AdMobEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a user action on an ad causes the focus to change elsewhere
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions:AdMob_com.milkmangames.nativeextensions.events.AdMobEvent.SCREEN_DISMISSED_SCREEN_DISMISSED"><apiName>SCREEN_DISMISSED</apiName><shortdesc> Dispatched when a fullscreen interactive ad viewv is dismissed by the ad
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.events.AdMobEvent.SCREEN_DISMISSED</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.events.AdMobEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a fullscreen interactive ad viewv is dismissed by the ad
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions:AdMob_com.milkmangames.nativeextensions.events.AdMobEvent.SCREEN_PRESENTED_SCREEN_PRESENTED"><apiName>SCREEN_PRESENTED</apiName><shortdesc> Dispatched when a fullscreen interactive ad view is presented by an ad
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.events.AdMobEvent.SCREEN_PRESENTED</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.events.AdMobEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when a fullscreen interactive ad view is presented by an ad
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions:AdMob_com.milkmangames.nativeextensions.events.AdMobErrorEvent.FAILED_TO_RECEIVE_AD_FAILED_TO_RECEIVE_AD"><apiName>FAILED_TO_RECEIVE_AD</apiName><shortdesc> Dispatched when ad has failed to load after a call to showAd() 
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.events.AdMobErrorEvent.FAILED_TO_RECEIVE_AD</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.events.AdMobErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when ad has failed to load after a call to showAd() 
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="com.milkmangames.nativeextensions:AdMob_com.milkmangames.nativeextensions.events.AdMobEvent.RECEIVED_AD_RECEIVED_AD"><apiName>RECEIVED_AD</apiName><shortdesc> Dispatched when ad has successfully loaded following a call to AdMob.showAd()
	 </shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>com.milkmangames.nativeextensions.events.AdMobEvent.RECEIVED_AD</apiEventType><adobeApiEventClassifier>com.milkmangames.nativeextensions.events.AdMobEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> Dispatched when ad has successfully loaded following a call to AdMob.showAd()
	 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="com.milkmangames.nativeextensions:AdMob:addEventListener"><apiName>addEventListener</apiName><shortdesc>
	 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not been called
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>event type (AdMobEvent or AdMobErrorEvent)
	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc> The listener function that processes the event. 
	 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target and bubbling phases.
	 </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc> The priority level of the event listener. Priorities are designated by a 32-bit integer.
	 </apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the reference to the listener is strong or weak.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Registers an event listener object with an EventDispatcher object so that the listener receives notification of an event.
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.events.xml#AdMobEvent"><linktext>com.milkmangames.nativeextensions.events.AdMobEvent</linktext></link><link href="com.milkmangames.nativeextensions.events.xml#AdMobErrorEvent"><linktext>com.milkmangames.nativeextensions.events.AdMobErrorEvent</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:destroyAd"><apiName>destroyAd</apiName><shortdesc>
	 Destroys the current ad.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not been called
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiException><apiDesc>if there is no current ad to destroy
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Destroys the current ad.  Throws an error if no ad is currently active.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:getTestDeviceIDs"><apiName>getTestDeviceIDs</apiName><shortdesc>
	 Get an array containing the Test Device ID for your current device; you can pass this to the showAd() function during testing.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not bee ncalled
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>array containing current device's test ID
	 </apiDesc><apiType value="Vector$String"/></apiReturn></apiOperationDef><apiDesc>
	 Get an array containing the Test Device ID for your current device; you can pass this to the showAd() function during testing.
	 
	 Remember to remove it before publishing your application, so as not to display test ads to end users.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:init"><apiName>init</apiName><shortdesc>
	 Initialize the AdMob interface.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>publisherId</apiItemName><apiType value="String"/><apiDesc>your publisherId (check your AdMob account control panel for your App.)
	 </apiDesc></apiParam><apiParam><apiItemName>secondPublisherId</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>if publishing for both iOS and Android, and supported by this version of the extension, set the publisherId param to the Android ID and the second parameter to the iOS ID.  If publishing for only one platform, fill only fiirst parameter with the appropriate ID.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Initialize the AdMob interface.  Call this once, before using any other methods.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:refreshAd"><apiName>refreshAd</apiName><shortdesc>
	 Refresh the ad currently on display.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not been called
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiException><apiDesc>if there is no current ad to refresh
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Refresh the ad currently on display.  Throws an error if no ad is currently active.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
	 Removes a listener from the EventDispatcher object.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>if AdMob.init has not been called
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>event type (AdMobEvent or AdMobErrorEvent)
	 </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiDesc>The listener function that processes the event. 
	 </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target and bubbling phases.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
	 </apiDesc></apiOperationDetail><related-links><link href="com.milkmangames.nativeextensions.events.xml#AdMobEvent"><linktext>com.milkmangames.nativeextensions.events.AdMobEvent</linktext></link><link href="com.milkmangames.nativeextensions.events.xml#AdMobErrorEvent"><linktext>com.milkmangames.nativeextensions.events.AdMobErrorEvent</linktext></link></related-links></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:setVisibility"><apiName>setVisibility</apiName><shortdesc>
	 Sets the visibility of the current ad.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Thrown if AdMob.init has not yet been called first
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiException><apiDesc>Thrown if there is no activeAd to show or hide. 
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>visible</apiItemName><apiType value="Boolean"/><apiDesc>true or false - whether the ad is visible or not.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Sets the visibility of the current ad.  It may be useful to hide and show an ad instead of destroying and reloading.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="com.milkmangames.nativeextensions:AdMob:showAd"><apiName>showAd</apiName><shortdesc>
	 Displays a new Ad
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Thrown if AdMob.init has not yet been called first
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiException><apiDesc>if adFormat is not one of the valid types AdMobAdType.BANNER,AdMobAdType.IAB_BANNER,AdMobAdType.IAB_LEADERBOARD, or AdMobAdType.IAB_MRECT
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiException><apiDesc>if horizontalAlign is not one of the valid types AdMobAlignment.LEFT,AdMobAlignment.RIGHT, or AdMobAlignment.CENTER
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>if verticalAlign is not one of the valid types AdMobAlignment.TOP,AdMobAlignment.BOTTOM,AdMobAlignment.CENTER
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>ad format, of the type AdMobAdType.BANNER,AdMobAdType.IAB_BANNER,AdMobAdType.IAB_LEADERBOARD, or AdMobAdType.IAB_MRECT.  See AdMob documentation for more information.
	 </apiDesc></apiParam><apiParam><apiItemName>horizontalAlign</apiItemName><apiType value="String"/><apiDesc>horizontal alignment of the ad of the type AdMobAlignment.LEFT,AdMobAlignment.RIGHT, or AdMobAlignment.CENTER
	 </apiDesc></apiParam><apiParam><apiItemName>verticalAlign</apiItemName><apiType value="String"/><apiDesc>vertical alignment of the ad of the type AdMobAlignment.TOP,AdMobAlignment.BOTTOM,AdMobAlignment.CENTER
	 </apiDesc></apiParam><apiParam><apiItemName>testDevices</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>(optional) Vector of device test IDs, if running test ads on device.  (For convenience, you can pass AdMob.getTestDeviceIDs() to this parameter- but remember to remove it before publishing your app.)  Alternatively, to get your devices test id on Android, run an application and view logcat (command 'android-sdk\platform-tools\adb logcat').  Your device test ID will be printed there.  For iOS, you can just enter 'TEST'.  See Google's AdMob documentation for more details.
	 </apiDesc></apiParam><apiParam><apiItemName>offsetX</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>(optional) set an exact X pixel offset (for absolute positioning.)  Note that this is relative to the actual screen height, not any fullscreen scaling; if your screen is scaled, you'll need to calculate the correct relative coordinates.  for basic absolute positioning (traditional x, y from top left), use AdMobAlignment.TOP and AdMobAlignment.LEFT for horizontalAlign and verticalAlign respectively.
	 </apiDesc></apiParam><apiParam><apiItemName>offsetY</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>(optional) set an exact Y pixel offset (for absolute positioning.)  Note that this is relative to the actual screen height, not any fullscreen scaling; if your screen is scaled, you'll need to calculate the correct relative coordinates.  for basic absolute positioning (traditional x, y from top left), use AdMobAlignment.TOP and AdMobAlignment.LEFT for horizontalAlign and verticalAlign respectively.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Displays a new Ad
	 </apiDesc></apiOperationDetail><related-links><link href="http://helpcenter.admob.com/content/create-ad"><linktext>Google AdMob Documentation</linktext></link><link href="com.milkmangames.nativeextensions.xml#AdMobAdType"><linktext>AdMobAdType</linktext></link><link href="com.milkmangames.nativeextensions.xml#AdMobAlignment"><linktext>AdMobAlignment</linktext></link></related-links></apiOperation><apiValue id="com.milkmangames.nativeextensions:AdMob:VERSION"><apiName>VERSION</apiName><shortdesc>
	 Current API Version
	 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.0.1</apiData><apiType value="String"/></apiValueDef><apiDesc>
	 Current API Version
	 </apiDesc></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMob:isSupported:get"><apiName>isSupported</apiName><shortdesc>
	 Returns true if the platform is a mobile phone supporting AdMob.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	 Returns true if the platform is a mobile phone supporting AdMob. (Android, iOS, or both, depending on the extension version.)
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="com.milkmangames.nativeextensions:AdMobAlignment"><apiName>AdMobAlignment</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiValue id="com.milkmangames.nativeextensions:AdMobAlignment:BOTTOM"><apiName>BOTTOM</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>BOTTOM</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMobAlignment:CENTER"><apiName>CENTER</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>CENTER</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMobAlignment:LEFT"><apiName>LEFT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>LEFT</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMobAlignment:RIGHT"><apiName>RIGHT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>RIGHT</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="com.milkmangames.nativeextensions:AdMobAlignment:TOP"><apiName>TOP</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>TOP</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage>